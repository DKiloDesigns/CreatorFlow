generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  password                String?
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  plan                    String                 @default("FREE")
  stripeCustomerId        String?                @unique @map("stripe_customer_id")
  stripeSubscriptionId    String?                @unique @map("stripe_subscription_id")
  stripePriceId           String?                @map("stripe_price_id")
  stripeCurrentPeriodEnd  DateTime?              @map("stripe_current_period_end")
  paymentRetryCount       Int?                   @default(0) @map("payment_retry_count")
  paymentRetryDate        DateTime?              @map("payment_retry_date")
  settings                Json?
  twoFAEnabled            Boolean                @default(false)
  role                    UserRole               @default(USER)
  notificationPreferences Json?
  deactivated             Boolean                @default(false)
  resetToken              String?                @unique
  resetTokenExpiry        DateTime?
  accounts                Account[]
  analyticsAggregations   AnalyticsAggregation[]
  announcementsCreated    Announcement[]         @relation("AnnouncementCreatedBy")
  apiKeys                 ApiKey[]
  audienceMetrics         AudienceMetric[]
  auditLogs               AuditLog[]             @relation("AuditLogActor")
  brandCollabs            BrandCollab[]
  captionTemplates        CaptionTemplate[]
  feedback                Feedback[]
  hashtagGroups           HashtagGroup[]
  notifications           Notification[]
  posts                   Post[]
  sessions                Session[]
  socialAccounts          SocialAccount[]
  ownedTeams              Team[]                 @relation("TeamOwner")
  sentInvitations         TeamInvitation[]       @relation("TeamInvitationSender")
  teamMemberships         TeamMember[]           @relation("TeamMemberships")
  folders                 TemplateFolder[]
  snippets                TemplateSnippet[]
  announcementsRead       Announcement[]         @relation("AnnouncementReads")
  sharedFolders           TemplateFolder[]       @relation("FolderShares")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialAccount {
  id                    String    @id @default(cuid())
  userId                String
  platform              String
  platformUserId        String
  username              String
  encryptedAccessToken  String?
  encryptedRefreshToken String?
  tokenExpiresAt        DateTime?
  scopes                String?
  status                String    @default("active")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model Post {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  contentText    String?
  mediaUrls      String[]
  platforms      String[]
  scheduledAt    DateTime?
  publishedAt    DateTime?
  status         PostStatus   @default(DRAFT)
  views          Int?         @default(0)
  likes          Int?         @default(0)
  comments       Int?         @default(0)
  shares         Int?         @default(0)
  reach          Int?         @default(0)
  impressions    Int?         @default(0)
  engagementRate Float?       @default(0)
  
  // Enhanced metadata fields
  hashtags       String[]     @default([])
  mentions       String[]     @default([])
  location       String?
  errorMessage   String?      @db.Text
  
  // Repost functionality
  isRepost       Boolean      @default(false)
  repostInterval Int?         // Days between reposts
  repostCount    Int?         // Number of reposts remaining
  parentPostId   String?      // Link to original post for reposts
  
  brandCollabId  String?
  brandCollab    BrandCollab? @relation(fields: [brandCollabId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([brandCollabId])
  @@index([parentPostId])
}

model CaptionTemplate {
  id         String            @id @default(cuid())
  userId     String
  name       String
  content    String
  category   String            @default("Uncategorized")
  tags       String[]          @default([])
  isFavorite Boolean           @default(false)
  isPinned   Boolean           @default(false)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  activeFrom DateTime?
  activeTo   DateTime?
  usageLimit Int?
  usageCount Int               @default(0)
  language   String            @default("en")
  order      Int               @default(0)
  folderId   String?
  folder     TemplateFolder?   @relation(fields: [folderId], references: [id])
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares     TemplateShare[]   @relation("CaptionTemplateShares")
  usages     TemplateUsage[]   @relation("CaptionTemplateUsages")
  versions   TemplateVersion[] @relation("CaptionTemplateVersions")

  @@index([userId])
}

model HashtagGroup {
  id         String            @id @default(cuid())
  userId     String
  name       String
  hashtags   String[]
  category   String            @default("Uncategorized")
  tags       String[]          @default([])
  isFavorite Boolean           @default(false)
  isPinned   Boolean           @default(false)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  activeFrom DateTime?
  activeTo   DateTime?
  usageLimit Int?
  usageCount Int               @default(0)
  language   String            @default("en")
  order      Int               @default(0)
  folderId   String?
  folder     TemplateFolder?   @relation(fields: [folderId], references: [id])
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares     TemplateShare[]   @relation("HashtagGroupShares")
  usages     TemplateUsage[]   @relation("HashtagGroupUsages")
  versions   TemplateVersion[] @relation("HashtagGroupVersions")

  @@index([userId])
}

model AudienceMetric {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  date      DateTime
  followers Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BrandCollab {
  id           String    @id @default(cuid())
  userId       String
  brandName    String
  campaignName String
  deadline     DateTime?
  deliverables String?
  payment      Float?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts        Post[]
}

model ApiKey {
  id        String    @id @default(cuid())
  userId    String
  key       String    @unique
  name      String?
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TemplateVersion {
  id                String           @id @default(cuid())
  captionTemplateId String?
  hashtagGroupId    String?
  type              String
  userId            String
  name              String
  content           String?
  hashtags          String[]
  category          String
  tags              String[]
  createdAt         DateTime         @default(now())
  captionTemplate   CaptionTemplate? @relation("CaptionTemplateVersions", fields: [captionTemplateId], references: [id])
  hashtagGroup      HashtagGroup?    @relation("HashtagGroupVersions", fields: [hashtagGroupId], references: [id])
}

model TemplateShare {
  id                String           @id @default(cuid())
  type              String
  captionTemplateId String?
  hashtagGroupId    String?
  userId            String
  sharedWithUserId  String?
  sharedWithEmail   String
  permissions       String[]
  createdAt         DateTime         @default(now())
  captionTemplate   CaptionTemplate? @relation("CaptionTemplateShares", fields: [captionTemplateId], references: [id])
  hashtagGroup      HashtagGroup?    @relation("HashtagGroupShares", fields: [hashtagGroupId], references: [id])

  @@index([captionTemplateId])
  @@index([hashtagGroupId])
  @@index([sharedWithEmail])
}

model TemplateUsage {
  id                String           @id @default(cuid())
  type              String
  captionTemplateId String?
  hashtagGroupId    String?
  userId            String
  action            String
  usedAt            DateTime         @default(now())
  captionTemplate   CaptionTemplate? @relation("CaptionTemplateUsages", fields: [captionTemplateId], references: [id])
  hashtagGroup      HashtagGroup?    @relation("HashtagGroupUsages", fields: [hashtagGroupId], references: [id])

  @@index([captionTemplateId])
  @@index([hashtagGroupId])
  @@index([userId])
}

model TemplateSnippet {
  id        String   @id @default(cuid())
  userId    String
  name      String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TemplateFolder {
  id               String            @id @default(cuid())
  userId           String
  name             String
  parentId         String?
  createdAt        DateTime          @default(now())
  sharedWithEmails String[]          @default([])
  deletedAt        DateTime?
  isDeleted        Boolean           @default(false)
  captionTemplates CaptionTemplate[]
  hashtagGroups    HashtagGroup[]
  parent           TemplateFolder?   @relation("FolderParent", fields: [parentId], references: [id])
  children         TemplateFolder[]  @relation("FolderParent")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith       User[]            @relation("FolderShares")

  @@index([userId])
  @@index([parentId])
}

model AnalyticsCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key, expiresAt])
}

model AnalyticsRateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([key, resetAt])
}

model AnalyticsAggregation {
  id        String   @id @default(cuid())
  userId    String
  type      String
  platform  String?
  startDate DateTime
  endDate   DateTime
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, platform, startDate, endDate])
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  published   Boolean   @default(false)
  publishedAt DateTime?
  audience    String?
  createdBy   User      @relation("AnnouncementCreatedBy", fields: [createdById], references: [id])
  readBy      User[]    @relation("AnnouncementReads")
}

model Team {
  id          String           @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  settings    Json?
  owner       User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations TeamInvitation[]
  members     TeamMember[]
  workspaces  TeamWorkspace[]

  @@index([ownerId])
}

model TeamMember {
  id        String           @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole         @default(MEMBER)
  joinedAt  DateTime         @default(now())
  invitedBy String?
  invitedAt DateTime?
  status    TeamMemberStatus @default(ACTIVE)
  team      Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User             @relation("TeamMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamWorkspace {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settings    Json?
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model TeamInvitation {
  id            String               @id @default(cuid())
  teamId        String
  email         String
  role          TeamRole             @default(MEMBER)
  invitedBy     String
  token         String               @unique
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime             @default(now())
  respondedAt   DateTime?
  status        TeamInvitationStatus @default(PENDING)
  invitedByUser User                 @relation("TeamInvitationSender", fields: [invitedBy], references: [id])
  team          Team                 @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([email])
  @@index([token])
}

model Feedback {
  id        String    @id @default(cuid())
  userId    String
  message   String
  createdAt DateTime  @default(now())
  resolved  Boolean   @default(false)
  reply     String?
  repliedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  actorId    String?
  targetId   String?
  targetType String?
  details    Json?
  createdAt  DateTime @default(now())
  actor      User?    @relation("AuditLogActor", fields: [actorId], references: [id])
}

// Notification model
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // NotificationType enum
  title       String
  message     String   @db.Text
  severity    String   // NotificationSeverity enum
  category    String   // NotificationCategory enum
  channels    String[] // NotificationChannel[]
  priority    String   // NotificationPriority enum
  metadata    Json?
  actionUrl   String?
  actionText  String?
  read        Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TeamMemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  USER
  ADMIN
}

enum TeamInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELED
}
