// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model (Compatible with NextAuth.js)
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?         // <-- Added for credentials auth
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Simplified plan field (could be removed or kept alongside Stripe status)
  plan          String          @default("FREE") 

  // --- Stripe Billing Fields ---
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  paymentRetryCount      Int?      @default(0) @map(name: "payment_retry_count")
  paymentRetryDate       DateTime? @map(name: "payment_retry_date")

  accounts      Account[] // NextAuth.js accounts
  sessions      Session[] // NextAuth.js sessions
  socialAccounts SocialAccount[] // Our specific social media connections

  // --- Relations for Content Scheduling ---
  posts           Post[]
  captionTemplates CaptionTemplate[]
  hashtagGroups   HashtagGroup[]
  audienceMetrics AudienceMetric[]
  brandCollabs    BrandCollab[]

  apiKeys ApiKey[]
  snippets TemplateSnippet[]
  folders TemplateFolder[]
  analyticsAggregations AnalyticsAggregation[]
  sharedFolders TemplateFolder[] @relation("FolderShares")
}

// NextAuth.js Account Model (Handles OAuth sign-in connections)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js VerificationToken Model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our Specific Social Media Account Connections
model SocialAccount {
  id              String   @id @default(cuid())
  userId          String
  platform        String // e.g., "instagram", "tiktok", "youtube", "twitter"
  platformUserId  String // The user's ID on that platform
  username        String // The user's handle/username on that platform

  // Encrypted Tokens - Store as strings, handle encryption/decryption in code
  encryptedAccessToken  String?
  encryptedRefreshToken String?
  // Consider storing expiry and scopes if needed for refresh
  tokenExpiresAt  DateTime?
  scopes          String? // Comma-separated list of scopes granted

  status          String   @default("active") // e.g., "active", "needs_reauth"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform]) // User can only connect one account per platform
}

// --- New Models for Content Scheduling ---

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING // In the process of being sent to the platform
  PUBLISHED
  FAILED
}

// Enhanced Post model with more analytics fields
model Post {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  contentText   String?     @db.Text
  mediaUrls     String[]
  platforms     String[]
  scheduledAt   DateTime?
  publishedAt   DateTime?
  status        PostStatus  @default(DRAFT)
  views         Int?        @default(0)
  likes         Int?        @default(0)
  comments      Int?        @default(0)
  shares        Int?        @default(0)
  reach         Int?        @default(0)
  impressions   Int?        @default(0)
  engagementRate Float?     @default(0)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandCollab   BrandCollab? @relation(fields: [brandCollabId], references: [id])
  brandCollabId String?

  @@index([userId])
  @@index([brandCollabId])
}

model CaptionTemplate {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name      String   // User-given name for the template
  content   String   @db.Text
  category  String   @default("Uncategorized")
  tags      String[] @default([])
  isFavorite Boolean @default(false)
  isPinned   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  activeFrom DateTime?
  activeTo   DateTime?
  usageLimit Int?
  usageCount Int @default(0)
  
  usages TemplateUsage[] @relation("CaptionTemplateUsages")
  
  language String @default("en")
  
  order Int @default(0)
  
  folderId String?
  folder   TemplateFolder? @relation(fields: [folderId], references: [id])
  
  @@index([userId])
  versions TemplateVersion[] @relation("CaptionTemplateVersions")
  shares TemplateShare[] @relation("CaptionTemplateShares")
}

model HashtagGroup {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name      String   // User-given name for the group
  hashtags  String[] // Array of hashtag strings (e.g., ["#marketing", "#socialmedia"])
  category  String   @default("Uncategorized")
  tags      String[] @default([])
  isFavorite Boolean @default(false)
  isPinned   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activeFrom DateTime?
  activeTo   DateTime?
  usageLimit Int?
  usageCount Int @default(0)

  usages TemplateUsage[] @relation("HashtagGroupUsages")

  language String @default("en")

  order Int @default(0)

  folderId String?
  folder   TemplateFolder? @relation(fields: [folderId], references: [id])

  @@index([userId])
  versions TemplateVersion[] @relation("HashtagGroupVersions")
  shares TemplateShare[] @relation("HashtagGroupShares")
}

model AudienceMetric {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform  String
  date      DateTime
  followers Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrandCollab {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandName     String
  campaignName  String
  deadline      DateTime?
  deliverables  String?
  payment       Float?
  notes         String?
  posts         Post[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key       String   @unique
  name      String?
  createdAt DateTime @default(now())
  revokedAt DateTime?
}

// Example Enum for Plan (Can be used later)
// enum Plan {
//  FREE
//  PRO
// }

model TemplateVersion {
  id        String   @id @default(cuid())
  captionTemplateId String? 
  hashtagGroupId    String?
  type      String   // 'caption' or 'hashtag'
  userId    String
  name      String
  content   String?  // For captions
  hashtags  String[] // For hashtags
  category  String
  tags      String[]
  createdAt DateTime @default(now())

  // Relations
  captionTemplate CaptionTemplate? @relation("CaptionTemplateVersions", fields: [captionTemplateId], references: [id])
  hashtagGroup   HashtagGroup?    @relation("HashtagGroupVersions", fields: [hashtagGroupId], references: [id])
}

model TemplateShare {
  id        String   @id @default(cuid())
  type      String   // 'caption' or 'hashtag'
  captionTemplateId String?
  hashtagGroupId    String?
  userId    String  // Owner
  sharedWithUserId String?
  sharedWithEmail  String
  permissions      String[]
  createdAt DateTime @default(now())

  captionTemplate CaptionTemplate? @relation("CaptionTemplateShares", fields: [captionTemplateId], references: [id])
  hashtagGroup   HashtagGroup?    @relation("HashtagGroupShares", fields: [hashtagGroupId], references: [id])

  @@index([captionTemplateId])
  @@index([hashtagGroupId])
  @@index([sharedWithEmail])
}

model TemplateUsage {
  id        String   @id @default(cuid())
  type      String   // 'caption' or 'hashtag'
  captionTemplateId String?
  hashtagGroupId    String?
  userId    String
  action    String   // e.g., 'insert', 'export', 'bulk', etc.
  usedAt    DateTime @default(now())

  captionTemplate CaptionTemplate? @relation("CaptionTemplateUsages", fields: [captionTemplateId], references: [id])
  hashtagGroup   HashtagGroup?    @relation("HashtagGroupUsages", fields: [hashtagGroupId], references: [id])

  @@index([captionTemplateId])
  @@index([hashtagGroupId])
  @@index([userId])
}

model TemplateSnippet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())

  @@index([userId])
}

model TemplateFolder {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  parentId  String?
  parent    TemplateFolder? @relation("FolderParent", fields: [parentId], references: [id])
  children  TemplateFolder[] @relation("FolderParent")
  createdAt DateTime @default(now())
  captionTemplates CaptionTemplate[]
  hashtagGroups HashtagGroup[]

  // Sharing
  sharedWith        User[]   @relation("FolderShares")
  sharedWithEmails  String[] @default([])

  // Soft delete
  deletedAt DateTime?
  isDeleted Boolean @default(false)

  @@index([userId])
  @@index([parentId])
}

// Analytics Cache for performance optimization
model AnalyticsCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key, expiresAt])
}

// Rate Limiting for API endpoints
model AnalyticsRateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([key, resetAt])
}

// Analytics Aggregation for pre-computed metrics
model AnalyticsAggregation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // e.g., "daily", "weekly", "monthly"
  platform  String?
  startDate DateTime
  endDate   DateTime
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, type, platform, startDate, endDate])
}
