// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model (Compatible with NextAuth.js)
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Simplified plan field (could be removed or kept alongside Stripe status)
  plan          String          @default("FREE") 

  // --- Stripe Billing Fields ---
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  paymentRetryCount      Int?      @default(0) @map(name: "payment_retry_count")
  paymentRetryDate       DateTime? @map(name: "payment_retry_date")

  accounts      Account[] // NextAuth.js accounts
  sessions      Session[] // NextAuth.js sessions
  socialAccounts SocialAccount[] // Our specific social media connections

  // --- Relations for Content Scheduling ---
  posts           Post[]
  captionTemplates CaptionTemplate[]
  hashtagGroups   HashtagGroup[]
}

// NextAuth.js Account Model (Handles OAuth sign-in connections)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js VerificationToken Model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our Specific Social Media Account Connections
model SocialAccount {
  id              String   @id @default(cuid())
  userId          String
  platform        String // e.g., "instagram", "tiktok", "youtube", "twitter"
  platformUserId  String // The user's ID on that platform
  username        String // The user's handle/username on that platform

  // Encrypted Tokens - Store as strings, handle encryption/decryption in code
  encryptedAccessToken  String?
  encryptedRefreshToken String?
  // Consider storing expiry and scopes if needed for refresh
  tokenExpiresAt  DateTime?
  scopes          String? // Comma-separated list of scopes granted

  status          String   @default("active") // e.g., "active", "needs_reauth"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform]) // User can only connect one account per platform
}

// --- New Models for Content Scheduling ---

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING // In the process of being sent to the platform
  PUBLISHED
  FAILED
}

model Post {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contentText  String?    @db.Text // Use Text for potentially long captions
  mediaUrls    String[]   // Array of URLs pointing to media (e.g., Cloudinary URLs)
  platforms    String[]   // List of platforms to post to (e.g., ["instagram", "twitter"])
  // Alternatively, could relate to SocialAccount IDs if more complex logic needed
  
  status       PostStatus @default(DRAFT)
  scheduledAt  DateTime?  // Null if draft, set when scheduled
  publishedAt  DateTime?  // Timestamp when successfully published
  
  // Store platform-specific post IDs if returned after successful publishing
  // Using Json type to handle variability between platforms
  platformPostIds Json?   
  
  errorMessage String?    // Store error message if status is FAILED

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId, status, scheduledAt]) // Index for fetching scheduled posts
}

model CaptionTemplate {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name      String   // User-given name for the template
  content   String   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

model HashtagGroup {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name      String   // User-given name for the group
  hashtags  String[] // Array of hashtag strings (e.g., ["#marketing", "#socialmedia"])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Example Enum for Plan (Can be used later)
// enum Plan {
//  FREE
//  PRO
// }
